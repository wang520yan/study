一、Docker 包括三个基本概念：
	镜像（Image）
	容器（Container）
	仓库（Repository）
Docker 镜像就是一个只读的模板。
Docker 利用容器来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。
可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。
仓库是集中存放镜像文件的场所。
二、CentOS安装docker：
	1.CentOS6
  对于 CentOS6，可以使用 EPEL 库安装 Docker，命令如下
  $ sudo yum install http://mirrors.yun-idc.com/epel/6/i386/epel-release-6-8.noarch.rpm
  $ sudo yum install docker-io
	2.CentOS7
  CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装：
  $ sudo yum install docker
  安装之后启动 Docker 服务，并让它随系统启动自动加载。
  $ sudo service docker start
  $ sudo chkconfig docker on
三、镜像操作：
	查找：docker search centos
	获取：docker pull ubuntu:12.04
	列出：docker images
	修改新建：docker commit -m "Added python" -a "Docker python" python-dev wy/python:v1
	导入：cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04
	上传：docker push wy/python:v1
	存出：docker save -o ubuntu_14.04.tar ubuntu:14.04
	载入：docker load --input ubuntu_14.04.tar   /   docker load < ubuntu_14.04.tar
	删除：docker rmi ubuntu:14.04
四、容器操作：
	新建容器：docker run -it --name demo --net=host centos /bin/bash
	-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， 
	-i 则让容器的标准输入保持打开。
	守护态运行：docker run -d --name demo2 --net=host centos 
	让 Docker 容器在后台以守护态（Daemonized）形式运行
	启动容器：docker start demo
	查看容器：docker ps / docker ps -a
	停止容器：docker stop demo
	进去容器：docker attach demo2
	导出容器：docker export 7691a814370e > ubuntu.tar
	导入容器：cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0
	用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。
	删除容器：docker rm demo
五、数据卷：
	数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：
  数据卷可以在容器之间共享和重用
  对数据卷的修改会立马生效
  对数据卷的更新，不会影响镜像
  卷会一直存在，直到没有容器使用 *数据卷的使用，类似于 Linux 下对目录或文件进行 mount。
1.在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。
  docker run -d -P --name web -v /webapp training/webapp python app.py
2.使用 -v 标记也可以指定挂载一个本地主机的目录到容器中去。
  docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py
3.-v 标记也可以从主机挂载单个文件到容器中
  docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash
六、数据卷容器：
	数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。
首先，创建一个命名的数据卷容器 dbdata：
	$ docker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres
然后，在其他容器中使用 --volumes-from 来挂载 dbdata 容器中的数据卷。
	$ docker run -d --volumes-from dbdata --name db1 training/postgres
	$ docker run -d --volumes-from dbdata --name db2 training/postgres
还可以使用多个 --volumes-from 参数来从多个容器挂载多个数据卷。 也可以从其他已经挂载了数据卷的容器来挂载数据卷。
	$ docker run -d --name db3 --volumes-from db1 training/postgres
注意：使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。
如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。
七、外部访问容器：
	容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。
ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort
	1.映射所有接口地址  docker run -d -p 5000:5000 training/webapp python app.py
	2.映射到指定地址的指定端口  docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py
	3.映射到指定地址的任意端口  docker run -d -p 127.0.0.1::5000 training/webapp python app.py
	查看映射端口配置 docker port nostalgic_morse 5000
	
	
